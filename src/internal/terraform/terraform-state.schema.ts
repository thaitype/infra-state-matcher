import { z } from "zod";
import type { Equal, Expect } from "../types.js";
import type { ResourceAnnotationsPayload } from "../resource-annotation.js";

export const resourceAnnotationsPayloadSchema = z.object({
  env: z.string(),
  site: z.string(),
  slot: z.string(),
  scope: z.string(),
  service: z.string(),
  resource_type: z.string(),
  metadata: z.record(z.string()).optional(),
});

type _ResourceAnnotationsPayload = z.infer<typeof resourceAnnotationsPayloadSchema>;
type TestResourceAnnotationsPayload = Expect<Equal<_ResourceAnnotationsPayload, ResourceAnnotationsPayload>>;

export const terraformResourceSchema = z.object({
  address: z.string(),
  mode: z.string(),
  type: z.string(),
  name: z.string(),
  provider_name: z.string(),
  schema_version: z.number(),
  values: z.record(z.unknown()),
  sensitive_values: z.record(z.unknown()),
  depends_on: z.array(z.string()).optional(),
  /**
   * Generated by @ref `ResourceAnnotation.generateId()`
   */
  ism_annotation_id: z.string().optional(),
  /**
   * Annotations for the resource
   */
  ism_annotations_payload: resourceAnnotationsPayloadSchema.optional(),
});

export type TerraformResource = z.infer<typeof terraformResourceSchema>;

/**
 * The schema for the JSON output from command `terraform show -json`.
 * @see https://developer.hashicorp.com/terraform/cli/commands/show
 */
export const terraformStateOutputSchema = z.object({
  format_version: z.string(),
  terraform_version: z.string(),
  values: z.object({
    root_module: z.object({
      resources: z.array(terraformResourceSchema),
    }),
  }),
});

export type TerraformStateOutput = z.infer<typeof terraformStateOutputSchema>;
